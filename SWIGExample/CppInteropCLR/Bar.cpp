// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "Bar.h"

using namespace System;
using namespace System::Runtime::InteropServices;

Sample::Bar::Bar(class ::Bar* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

Sample::Bar^ Sample::Bar::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::Sample::Bar((class ::Bar*) native.ToPointer());
}

Sample::Bar::Bar(class ::Bar* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

Sample::Bar^ Sample::Bar::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::Sample::Bar((class ::Bar*) native.ToPointer(), __ownsNativeInstance);
}

Sample::Bar::~Bar()
{
    delete NativePtr;
}

Sample::Bar::Bar()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::Bar();
}

Sample::Bar::Bar(Sample::Bar^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::Bar*)_0->NativePtr;
    NativePtr = new class ::Bar(__arg0);
}

::System::IntPtr Sample::Bar::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void Sample::Bar::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::Bar*)object.ToPointer();
}

int Sample::Bar::A::get()
{
    return NativePtr->a;
}

void Sample::Bar::A::set(int value)
{
    ((class ::Bar*)NativePtr)->a = value;
}

