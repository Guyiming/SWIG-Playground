// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include <Foo.h>

namespace Sample
{
    ref class Bar;
    ref class Foo;
}

namespace Sample
{
    public ref class Foo : ICppInstance
    {
    public:

        property class ::Foo* NativePtr;
        property ::System::IntPtr __Instance
        {
            virtual ::System::IntPtr get();
            virtual void set(::System::IntPtr instance);
        }

        Foo(class ::Foo* native);
        Foo(class ::Foo* native, bool ownNativeInstance);
        static Foo^ __CreateInstance(::System::IntPtr native);
        static Foo^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
        Foo();

        Foo(Sample::Foo^ _0);

        ~Foo();

        void SetValue(Sample::Bar^ bObj, Sample::Bar^ barPtr, Sample::Bar^ barPtrMalloc, Sample::Bar^ barRef, Sample::Bar^ barRefMalloc);

        void SetValue2(Sample::Bar^ b);

        int SimpleForBenchmark(int a, int b);

        void ComplexForBenchmark(Sample::Bar^ bar1, Sample::Bar^ barPtr, Sample::Bar^ barRef);

    protected:

        bool __ownsNativeInstance;
    };
}
